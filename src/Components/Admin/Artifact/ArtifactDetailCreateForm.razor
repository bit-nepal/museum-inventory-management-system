@namespace mims.Components.Admin.Artifact
@using mims.Components.Admin
@layout AdminLayout
@using mims.Models

@using Microsoft.AspNetCore.Identity;
@inject mims.Services.Interfaces.IArtifactService artifactService
@inject NavigationManager Navigation
@inject ToastService ToastService
<Offcanvas @ref="offcanvas"  Size="OffcanvasSize.Small" UseStaticBackdrop="true" style="width: 0px; height:0px;" />

<Alert Color="AlertColor.Light">
    <div class="d-flex justify-content-between align-items-center">
        <h4 class="alert-heading">
            Add Artifacts !!
        </h4>
    </div>
</Alert>

<Breadcrumb style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);" Items="navItems" />

@if(artifact is not null){
  <ArtifactDetailForm OnValidSubmitHandler="HandleValidSubmit" ButtonText="Add Artifact" bindingArtifactObject="artifact" />
}

@code {
    private Offcanvas offcanvas = default!;
    public Artifact artifact = new Artifact();
    public Image primaryPhoto = new Image();
    private List<BreadcrumbItem>? navItems;

    protected override void OnInitialized()
    {
        navItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem{ Text = "Dashboard", Href ="/Admin" },
            new BreadcrumbItem{ Text = "Artifacts", Href ="/Admin/Artifacts" },
            new BreadcrumbItem{ Text = "Add Artifact", IsCurrentPage = true }
        };
        artifact.PrimaryPhoto = primaryPhoto;
    } 

    public async Task HandleValidSubmit()
    {
        offcanvas.ShowAsync();
        var result = await artifactService.AddArtifact(artifact);
        if(result.Succeeded)
        {
          ToastService.Notify( new() {
            IconName = IconName.Apple,
            Title = "Artifact Creation Success !!",
            Message = "Specified Artifact has been Added Successfully !!",
            Type = ToastType.Success
          });
          artifact = new Artifact(){
            PrimaryPhoto = new Image()
          };
        }else
        {
          string message = "";
          foreach(IdentityError error in result.Errors)
          {
            message += $"{error.Description}";
            Console.WriteLine(error.Description);
          }

          ToastService.Notify( new() {
            IconName = IconName.Apple,
            Title = "Artifact Creation Failed !!",
            Message = message,
            Type = ToastType.Danger
          });
        }
        offcanvas.HideAsync();
    }
}
