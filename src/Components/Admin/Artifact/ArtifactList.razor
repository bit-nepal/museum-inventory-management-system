@namespace mims.Components.Admin.Artifact
@using mims.Models
@using mims.Services.Interfaces
@inject IArtifactService ArtifactService

<Alert Color="AlertColor.Light">
    <h4 class="alert-heading">Artifacts !!</h4>
</Alert>

<Grid TItem="Artifact"
      Class="table table-hover table-bordered table-striped"
      DataProvider="ArtifactsDataProvider"
      AllowFiltering="true"
      AllowPaging="true"
      PageSize="5"
      AllowSorting="true"
      AllowSelection="true"
      SelectionMode="GridSelectionMode.Multiple"
      SelectedItemsChanged="OnSelectedItemsChanged"
      Responsive="true">

    <GridColumn TItem="Artifact" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.Id">
        @context.Id
    </GridColumn>
    <GridColumn TItem="Artifact" HeaderText="Artifact Name" PropertyName="Name" SortKeySelector="item => item.Name">
        @context.Name
    </GridColumn>
</Grid>

<div class="mt-3">
    Selected Items Count: @selectedArtifacts.Count
</div>

<div class="mt-2">
    Selected Artifacts:
    <ul>
        @foreach (var emp in selectedArtifacts)
        {
            <li>@emp.Name</li>
        }
    </ul>
</div>

@code {
    private IEnumerable<Artifact> employees = default!;
    private HashSet<Artifact> selectedArtifacts = new();

    private async Task<GridDataProviderResult<Artifact>> ArtifactsDataProvider(GridDataProviderRequest<Artifact> request)
    {
        if (employees is null) // pull employees only one time for client-side filtering, sorting, and paging
            employees = ArtifactService.GetAllArtifacts(); // call a service or an API to pull the employees
        return await Task.FromResult(request.ApplyTo(employees));
    }

    private Task OnSelectedItemsChanged(HashSet<Artifact> employees)
    {
        selectedArtifacts = employees is not null && employees.Any() ? employees : new(); 
        return Task.CompletedTask;
    }
}
