@namespace mims.Components.Admin
@using mims.Components.Admin.Dashboard
@using mims.Models
@inject mims.Services.Interfaces.IArtifactService ArtifactService
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<h1>Dashboard</h1>

<style>
    .my-special-card-container {
        transition: transform 0.3s;
    }
`
    .my-special-card-container:hover {
          transform: scale(1.05);
          box-shadow: 0 8px 16px rgba(0,0,0,0.2);
    }
</style>

<div class="d-flex m-3 justify-content-around">
    <div  class="my-special-card-container">
        <TotalArtifacts TotalNoOfArtifacts="TotalArtifacts"/>
    </div>
    <div>
        <BoughtArtifacts NoOfBoughtArtifacts="BoughtArtifacts"/>
    </div>
    <div>
        <RentedArtifacts NoOfRentedArtifacts="RentedArtifacts"/>
    </div>
</div>

<div class="d-flex m-3 justify-content-around">
    <MostValuableArtifacts artifacts="MostValuableArtifacts"/>
    <RecentlyAddedArtifacts artifacts="RecentlyAddedArtifacts"/>
</div>

@code{
    private int NoOfArtifactsToShowInList = 4;
    private int TotalArtifacts { get; set; } 
    private int BoughtArtifacts { get; set;}
    private int RentedArtifacts { get; set;}
    private IEnumerable<mims.Models.Artifact> artifacts{ get; set; }
    private IEnumerable<mims.Models.Artifact> RecentlyAddedArtifacts{ get; set; }
    private IEnumerable<mims.Models.Artifact> MostValuableArtifacts{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (artifacts is null) // pull artifacts only one time for client-side filtering, sorting, and paging
            artifacts = await ArtifactService.GetAllArtifacts();

        TotalArtifacts   = artifacts.Count();
        BoughtArtifacts  = artifacts.Where(a  =>  a.ModeOfAcquisition ==  AcquisitionMode.Buying).Count();
        RentedArtifacts  = artifacts.Where(a  =>  a.ModeOfAcquisition ==  AcquisitionMode.Rent).Count();
        RecentlyAddedArtifacts = artifacts.OrderByDescending(artifact => artifact.CreatedAt)
                                .Take(NoOfArtifactsToShowInList ).ToList();
        MostValuableArtifacts = artifacts.OrderByDescending(artifact => artifact.EstimatedValue)
                                .Take(NoOfArtifactsToShowInList ).ToList();
    }
}
